#!/usr/bin/env python3
"""
install_daemon.py — generate wrapper + systemd unit for an image‑daemon.

Usage
-----
# Quick one‑liner (no config file)
sudo python -m imagedaemon.scripts.install_daemon \
        --cameras winter --service-name imagedaemon-winter --auto-start

# Read everything from YAML, override just --ns-host
sudo python -m imagedaemon.scripts.install_daemon \
        --config /etc/imagedaemon/winter.yml --ns-host 10.0.0.5
"""
from __future__ import annotations

import argparse
import contextlib
import os
import shutil
import stat
import subprocess
import sys
import tempfile
import textwrap
from pathlib import Path


# ---------- safe config loader (yaml | toml | ini) -------------------------
def load_config(path: Path) -> dict:
    ext = path.suffix.lower()
    if ext in {".yml", ".yaml"}:
        import yaml

        return yaml.safe_load(path.read_text()) or {}
    if ext == ".toml":
        import tomli

        return tomli.loads(path.read_text())
    if ext in {".ini", ".cfg"}:
        from configparser import ConfigParser

        cp = ConfigParser()
        cp.read(path)
        return {k: v for k, v in cp["DEFAULT"].items()}
    raise ValueError(f"Unsupported config file: {path}")


# ---------- templates ------------------------------------------------------
WRAPPER = """\
#!/usr/bin/env bash
# Auto‑generated by install_daemon.py
source "{conda_sh}"
conda activate "{env}"
exec imagedaemon-daemon --cameras {cameras} --logfile "{log_dir}/{service}.log" --ns-host {ns_host}
"""

UNIT = """\
[Unit]
Description=Image‑Daemon for {cameras}
After=network.target

[Service]
Type=simple
User={user}
Group={group}
ExecStart={wrapper}
WorkingDirectory={workdir}
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
"""


# ---------- file writers ---------------------------------------------------
def write_executable(path: Path, text: str):
    path.write_text(text)
    path.chmod(path.stat().st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)


def emit_files(cfg: dict):
    conda_sh = shutil.which("conda")
    if not conda_sh:
        sys.exit("conda executable not found in PATH.")
    conda_sh = str(Path(conda_sh).parent.parent / "etc/profile.d/conda.sh")

    wrapper_path = Path(cfg["wrapper_dir"]) / f"{cfg['service_name']}.sh"
    unit_path = Path(cfg["unit_dir"]) / f"{cfg['service_name']}.service"
    Path(cfg["log_dir"]).mkdir(parents=True, exist_ok=True)

    write_executable(
        wrapper_path,
        WRAPPER.format(
            conda_sh=conda_sh,
            env=cfg["env"],
            cameras=cfg["cameras"],
            log_dir=cfg["log_dir"],
            service=cfg["service_name"],
            ns_host=cfg["ns_host"],
        ),
    )

    unit_path.write_text(
        UNIT.format(
            cameras=cfg["cameras"],
            user=cfg["user"],
            group=cfg["group"],
            wrapper=wrapper_path,
            workdir=cfg.get("workdir", "/opt"),
        )
    )

    print(f"[OK] wrote wrapper → {wrapper_path}")
    print(f"[OK] wrote unit    → {unit_path}")

    if cfg.get("auto_start"):
        subprocess.run(["systemctl", "daemon-reload"], check=True)
        subprocess.run(
            ["systemctl", "enable", "--now", cfg["service_name"]], check=True
        )
        print(f"[OK] service {cfg['service_name']} enabled & started")


# ---------- argparse & merge ----------------------------------------------
def parse_cli() -> dict:
    p = argparse.ArgumentParser()
    p.add_argument("--config", help="YAML/TOML/INI with defaults")
    p.add_argument("--cameras")
    p.add_argument("--env")
    p.add_argument("--service-name")
    p.add_argument("--user")
    p.add_argument("--group")
    p.add_argument("--log-dir")
    p.add_argument("--wrapper-dir")
    p.add_argument("--unit-dir")
    p.add_argument("--ns-host")
    p.add_argument("--auto-start", action="store_true")
    return {k: v for k, v in vars(p.parse_args()).items() if v is not None}


def main():
    if os.geteuid() != 0:
        sys.exit("Run as root (sudo) to write /etc/systemd files.")

    cli_cfg = parse_cli()
    file_cfg = load_config(Path(cli_cfg.pop("config"))) if "config" in cli_cfg else {}

    # merge: CLI overrides file
    cfg = {**file_cfg, **cli_cfg}

    # defaults
    defaults = dict(
        cameras="winter",
        env="imagedaemon",
        service_name="imagedaemon",
        user="root",
        group="root",
        log_dir="/var/log/imagedaemon",
        wrapper_dir="/usr/local/bin",
        unit_dir="/etc/systemd/system",
        ns_host="localhost",
        auto_start=False,
    )
    for k, v in defaults.items():
        cfg.setdefault(k, v)

    emit_files(cfg)


if __name__ == "__main__":
    main()
